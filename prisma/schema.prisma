generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  PATIENT
  DOCTOR
  ADMIN
}

enum PatientType {
  STUDENT
  FACULTY
  STAFF
  null
}

model User {
  id                   String              @id @default(cuid())
  name                 String
  email                String              @unique
  password             String?
  role                 UserRole
  patientType          PatientType?
  accounts             Account[]
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  PasswordResetToken   PasswordResetToken? @relation(fields: [passwordResetTokenId], references: [id])
  passwordResetTokenId String?

  patient Patient?
}

model Patient {
  id         String    @id @default(cuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  dob        DateTime?
  gender     String?   @db.Char(5)
  phone      String?   @db.VarChar(25)
  bloodGroup String?   @db.VarChar(10)
  address    String?   @db.Text

  studentInfo StudentInfo?
  facultyInfo FacultyInfo?
  staffInfo   StaffInfo?

  @@unique([userId])
}

model StudentInfo {
  id              String  @id @default(cuid())
  patientId       String  @unique
  patient         Patient @relation(fields: [patientId], references: [id])
  currentSemester Int?
  department      String? @db.VarChar(50)
  program         String? @db.VarChar(50)
  originCountry   String? @db.VarChar(50)
}

model FacultyInfo {
  id         String    @id @default(cuid())
  patientId  String    @unique
  patient    Patient   @relation(fields: [patientId], references: [id])
  department String?   @db.VarChar(50)
  position   String?   @db.VarChar(50)
  hireDate   DateTime?
}

model StaffInfo {
  id         String    @id @default(cuid())
  patientId  String    @unique
  patient    Patient   @relation(fields: [patientId], references: [id])
  department String?   @db.VarChar(50)
  position   String?   @db.VarChar(50)
  hireDate   DateTime?
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  userId    String?
  User      User[]

  @@unique([email, token])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Test {
  id       String  @id @default(cuid())
  testName String  @unique
  details  String?
}

model Medicine {
  id           String  @id @default(cuid())
  medicineName String  @unique
  manufacturer String?
  description  String?
}
